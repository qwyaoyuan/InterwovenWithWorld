private float _CritDamageRatio;
/// <summary>
/// 暴击倍率(角色本身为1.5倍)
/// </summary>
public float CritDamageRatio
{
   get{return _CritDamageRatio;}
   set
   {
      float tempCritDamageRatio = _CritDamageRatio;
      _CritDamageRatio = value;
      if(tempCritDamageRatio != _CritDamageRatio)
      {
         UpdateAttribute();
         Call<IAttributeState, float >(temp => temp.CritDamageRatio);
      }
   }
}

private float _SpellTrapDamage;
/// <summary>
/// 法术陷阱伤害
/// </summary>
public float SpellTrapDamage
{
   get{return _SpellTrapDamage;}
   set
   {
      float tempSpellTrapDamage = _SpellTrapDamage;
      _SpellTrapDamage = value;
      if(tempSpellTrapDamage != _SpellTrapDamage)
      {
         UpdateAttribute();
         Call<IAttributeState, float >(temp => temp.SpellTrapDamage);
      }
   }
}

private float _SpellTrapEffectProbability;
/// <summary>
/// 法术陷阱特效产生几率
/// </summary>
public float SpellTrapEffectProbability
{
   get{return _SpellTrapEffectProbability;}
   set
   {
      float tempSpellTrapEffectProbability = _SpellTrapEffectProbability;
      _SpellTrapEffectProbability = value;
      if(tempSpellTrapEffectProbability != _SpellTrapEffectProbability)
      {
         UpdateAttribute();
         Call<IAttributeState, float >(temp => temp.SpellTrapEffectProbability);
      }
   }
}

private float _DamageToTheUndead;
/// <summary>
/// 对不死族伤害提升(百分比倍率)
/// </summary>
public float DamageToTheUndead
{
   get{return _DamageToTheUndead;}
   set
   {
      float tempDamageToTheUndead = _DamageToTheUndead;
      _DamageToTheUndead = value;
      if(tempDamageToTheUndead != _DamageToTheUndead)
      {
         UpdateAttribute();
         Call<IAttributeState, float >(temp => temp.DamageToTheUndead);
      }
   }
}

private float _ChaosOfTheUndead;
/// <summary>
/// 对不死族附加混乱几率
/// </summary>
public float ChaosOfTheUndead
{
   get{return _ChaosOfTheUndead;}
   set
   {
      float tempChaosOfTheUndead = _ChaosOfTheUndead;
      _ChaosOfTheUndead = value;
      if(tempChaosOfTheUndead != _ChaosOfTheUndead)
      {
         UpdateAttribute();
         Call<IAttributeState, float >(temp => temp.ChaosOfTheUndead);
      }
   }
}

private float _TreatmentVolume;
/// <summary>
/// 治疗量
/// </summary>
public float TreatmentVolume
{
   get{return _TreatmentVolume;}
   set
   {
      float tempTreatmentVolume = _TreatmentVolume;
      _TreatmentVolume = value;
      if(tempTreatmentVolume != _TreatmentVolume)
      {
         UpdateAttribute();
         Call<IAttributeState, float >(temp => temp.TreatmentVolume);
      }
   }
}

private float _TrapDefense;
/// <summary>
/// 对陷阱的防御力
/// </summary>
public float TrapDefense
{
   get{return _TrapDefense;}
   set
   {
      float tempTrapDefense = _TrapDefense;
      _TrapDefense = value;
      if(tempTrapDefense != _TrapDefense)
      {
         UpdateAttribute();
         Call<IAttributeState, float >(temp => temp.TrapDefense);
      }
   }
}

private float _MysticalBeliefIntensity;
/// <summary>
/// 神秘信仰强度
/// </summary>
public float MysticalBeliefIntensity
{
   get{return _MysticalBeliefIntensity;}
   set
   {
      float tempMysticalBeliefIntensity = _MysticalBeliefIntensity;
      _MysticalBeliefIntensity = value;
      if(tempMysticalBeliefIntensity != _MysticalBeliefIntensity)
      {
         UpdateAttribute();
         Call<IAttributeState, float >(temp => temp.MysticalBeliefIntensity);
      }
   }
}

private float _MysticalBeliefSpecialEffects;
/// <summary>
/// 神秘信仰特效产生几率
/// </summary>
public float MysticalBeliefSpecialEffects
{
   get{return _MysticalBeliefSpecialEffects;}
   set
   {
      float tempMysticalBeliefSpecialEffects = _MysticalBeliefSpecialEffects;
      _MysticalBeliefSpecialEffects = value;
      if(tempMysticalBeliefSpecialEffects != _MysticalBeliefSpecialEffects)
      {
         UpdateAttribute();
         Call<IAttributeState, float >(temp => temp.MysticalBeliefSpecialEffects);
      }
   }
}

private float _ImproveWorshipFaith;
/// <summary>
/// 崇拜信仰强度
/// </summary>
public float ImproveWorshipFaith
{
   get{return _ImproveWorshipFaith;}
   set
   {
      float tempImproveWorshipFaith = _ImproveWorshipFaith;
      _ImproveWorshipFaith = value;
      if(tempImproveWorshipFaith != _ImproveWorshipFaith)
      {
         UpdateAttribute();
         Call<IAttributeState, float >(temp => temp.ImproveWorshipFaith);
      }
   }
}

private float _AbnormalStateResistance;
/// <summary>
/// 异常状态抗性
/// </summary>
public float AbnormalStateResistance
{
   get{return _AbnormalStateResistance;}
   set
   {
      float tempAbnormalStateResistance = _AbnormalStateResistance;
      _AbnormalStateResistance = value;
      if(tempAbnormalStateResistance != _AbnormalStateResistance)
      {
         UpdateAttribute();
         Call<IAttributeState, float >(temp => temp.AbnormalStateResistance);
      }
   }
}

private float _ElementStandStrength;
/// <summary>
/// 元素立场强度
/// </summary>
public float ElementStandStrength
{
   get{return _ElementStandStrength;}
   set
   {
      float tempElementStandStrength = _ElementStandStrength;
      _ElementStandStrength = value;
      if(tempElementStandStrength != _ElementStandStrength)
      {
         UpdateAttribute();
         Call<IAttributeState, float >(temp => temp.ElementStandStrength);
      }
   }
}

private float _ExemptionChantingTime;
/// <summary>
/// 咏唱时间减免(百分比)
/// </summary>
public float ExemptionChantingTime
{
   get{return _ExemptionChantingTime;}
   set
   {
      float tempExemptionChantingTime = _ExemptionChantingTime;
      _ExemptionChantingTime = value;
      if(tempExemptionChantingTime != _ExemptionChantingTime)
      {
         UpdateAttribute();
         Call<IAttributeState, float >(temp => temp.ExemptionChantingTime);
      }
   }
}

private float _ReduceCoolingTime;
/// <summary>
/// 冷却时间减免(百分比)
/// </summary>
public float ReduceCoolingTime
{
   get{return _ReduceCoolingTime;}
   set
   {
      float tempReduceCoolingTime = _ReduceCoolingTime;
      _ReduceCoolingTime = value;
      if(tempReduceCoolingTime != _ReduceCoolingTime)
      {
         UpdateAttribute();
         Call<IAttributeState, float >(temp => temp.ReduceCoolingTime);
      }
   }
}

private float _AccelerateToUndead;
/// <summary>
/// 对不死族加速
/// </summary>
public float AccelerateToUndead
{
   get{return _AccelerateToUndead;}
   set
   {
      float tempAccelerateToUndead = _AccelerateToUndead;
      _AccelerateToUndead = value;
      if(tempAccelerateToUndead != _AccelerateToUndead)
      {
         UpdateAttribute();
         Call<IAttributeState, float >(temp => temp.AccelerateToUndead);
      }
   }
}

private float _ExperienceValuePlus;
/// <summary>
/// 经验值加成(与基础经验乘算)
/// </summary>
public float ExperienceValuePlus
{
   get{return _ExperienceValuePlus;}
   set
   {
      float tempExperienceValuePlus = _ExperienceValuePlus;
      _ExperienceValuePlus = value;
      if(tempExperienceValuePlus != _ExperienceValuePlus)
      {
         UpdateAttribute();
         Call<IAttributeState, float >(temp => temp.ExperienceValuePlus);
      }
   }
}

private float _GooodsDropRate;
/// <summary>
/// 物品掉落率(与基础掉落率乘算)
/// </summary>
public float GooodsDropRate
{
   get{return _GooodsDropRate;}
   set
   {
      float tempGooodsDropRate = _GooodsDropRate;
      _GooodsDropRate = value;
      if(tempGooodsDropRate != _GooodsDropRate)
      {
         UpdateAttribute();
         Call<IAttributeState, float >(temp => temp.GooodsDropRate);
      }
   }
}

