    /// <summary>
    /// 道具攻击力
    /// 注意:获取的是整合后的属性,而设置的是自身的属性 
    /// </summary>
    public float ItemAttacking
    {
        get
        {
            if (iAttributeStateDic == null)
                return 0;
            return iAttributeStateDic.Values.Select(temp => temp.ItemAttacking).Sum();
        }
        set
        {
            IAttributeState iAttributeBaseState = GetAttribute(0);
            if (iAttributeBaseState != null)
            {
                iAttributeBaseState.ItemAttacking = value;
            }
        }
    }

    /// <summary>
    /// 魔法攻击力
    /// 注意:获取的是整合后的属性,而设置的是自身的属性 
    /// </summary>
    public float MagicAttacking
    {
        get
        {
            if (iAttributeStateDic == null)
                return 0;
            return iAttributeStateDic.Values.Select(temp => temp.MagicAttacking).Sum();
        }
        set
        {
            IAttributeState iAttributeBaseState = GetAttribute(0);
            if (iAttributeBaseState != null)
            {
                iAttributeBaseState.MagicAttacking = value;
            }
        }
    }

    /// <summary>
    /// 物理攻击力
    /// 注意:获取的是整合后的属性,而设置的是自身的属性 
    /// </summary>
    public float PhysicsAttacking
    {
        get
        {
            if (iAttributeStateDic == null)
                return 0;
            return iAttributeStateDic.Values.Select(temp => temp.PhysicsAttacking).Sum();
        }
        set
        {
            IAttributeState iAttributeBaseState = GetAttribute(0);
            if (iAttributeBaseState != null)
            {
                iAttributeBaseState.PhysicsAttacking = value;
            }
        }
    }

    /// <summary>
    /// 魔法附加伤害
    /// 注意:获取的是整合后的属性,而设置的是自身的属性 
    /// </summary>
    public float MagicAdditionalDamage
    {
        get
        {
            if (iAttributeStateDic == null)
                return 0;
            return iAttributeStateDic.Values.Select(temp => temp.MagicAdditionalDamage).Sum();
        }
        set
        {
            IAttributeState iAttributeBaseState = GetAttribute(0);
            if (iAttributeBaseState != null)
            {
                iAttributeBaseState.MagicAdditionalDamage = value;
            }
        }
    }

    /// <summary>
    /// 物理伤害附加
    /// 注意:获取的是整合后的属性,而设置的是自身的属性 
    /// </summary>
    public float PhysicsAdditionalDamage
    {
        get
        {
            if (iAttributeStateDic == null)
                return 0;
            return iAttributeStateDic.Values.Select(temp => temp.PhysicsAdditionalDamage).Sum();
        }
        set
        {
            IAttributeState iAttributeBaseState = GetAttribute(0);
            if (iAttributeBaseState != null)
            {
                iAttributeBaseState.PhysicsAdditionalDamage = value;
            }
        }
    }

    /// <summary>
    /// 魔法攻击穿透
    /// 注意:获取的是整合后的属性,而设置的是自身的属性 
    /// </summary>
    public float MagicPenetrate
    {
        get
        {
            if (iAttributeStateDic == null)
                return 0;
            return iAttributeStateDic.Values.Select(temp => temp.MagicPenetrate).Sum();
        }
        set
        {
            IAttributeState iAttributeBaseState = GetAttribute(0);
            if (iAttributeBaseState != null)
            {
                iAttributeBaseState.MagicPenetrate = value;
            }
        }
    }

    /// <summary>
    /// 物理攻击穿透
    /// 注意:获取的是整合后的属性,而设置的是自身的属性 
    /// </summary>
    public float PhysicsPenetrate
    {
        get
        {
            if (iAttributeStateDic == null)
                return 0;
            return iAttributeStateDic.Values.Select(temp => temp.PhysicsPenetrate).Sum();
        }
        set
        {
            IAttributeState iAttributeBaseState = GetAttribute(0);
            if (iAttributeBaseState != null)
            {
                iAttributeBaseState.PhysicsPenetrate = value;
            }
        }
    }

    /// <summary>
    /// 魔法最终伤害
    /// 注意:获取的是整合后的属性,而设置的是自身的属性 
    /// </summary>
    public float MagicFinalDamage
    {
        get
        {
            if (iAttributeStateDic == null)
                return 0;
            return iAttributeStateDic.Values.Select(temp => temp.MagicFinalDamage).Sum();
        }
        set
        {
            IAttributeState iAttributeBaseState = GetAttribute(0);
            if (iAttributeBaseState != null)
            {
                iAttributeBaseState.MagicFinalDamage = value;
            }
        }
    }

    /// <summary>
    /// 物理最终伤害
    /// 注意:获取的是整合后的属性,而设置的是自身的属性 
    /// </summary>
    public float PhysicsFinalDamage
    {
        get
        {
            if (iAttributeStateDic == null)
                return 0;
            return iAttributeStateDic.Values.Select(temp => temp.PhysicsFinalDamage).Sum();
        }
        set
        {
            IAttributeState iAttributeBaseState = GetAttribute(0);
            if (iAttributeBaseState != null)
            {
                iAttributeBaseState.PhysicsFinalDamage = value;
            }
        }
    }

    /// <summary>
    /// 元素亲和
    /// 注意:获取的是整合后的属性,而设置的是自身的属性 
    /// </summary>
    public float ElementAffine
    {
        get
        {
            if (iAttributeStateDic == null)
                return 0;
            return iAttributeStateDic.Values.Select(temp => temp.ElementAffine).Sum();
        }
        set
        {
            IAttributeState iAttributeBaseState = GetAttribute(0);
            if (iAttributeBaseState != null)
            {
                iAttributeBaseState.ElementAffine = value;
            }
        }
    }

    /// <summary>
    /// 魔法亲和
    /// 注意:获取的是整合后的属性,而设置的是自身的属性 
    /// </summary>
    public float MagicAffine
    {
        get
        {
            if (iAttributeStateDic == null)
                return 0;
            return iAttributeStateDic.Values.Select(temp => temp.MagicAffine).Sum();
        }
        set
        {
            IAttributeState iAttributeBaseState = GetAttribute(0);
            if (iAttributeBaseState != null)
            {
                iAttributeBaseState.MagicAffine = value;
            }
        }
    }

    /// <summary>
    /// 魔法抗性（魔法防御）
    /// 注意:获取的是整合后的属性,而设置的是自身的属性 
    /// </summary>
    public float MagicResistance
    {
        get
        {
            if (iAttributeStateDic == null)
                return 0;
            return iAttributeStateDic.Values.Select(temp => temp.MagicResistance).Sum();
        }
        set
        {
            IAttributeState iAttributeBaseState = GetAttribute(0);
            if (iAttributeBaseState != null)
            {
                iAttributeBaseState.MagicResistance = value;
            }
        }
    }

    /// <summary>
    /// 物理抗性（物理防御）
    /// 注意:获取的是整合后的属性,而设置的是自身的属性 
    /// </summary>
    public float PhysicsResistance
    {
        get
        {
            if (iAttributeStateDic == null)
                return 0;
            return iAttributeStateDic.Values.Select(temp => temp.PhysicsResistance).Sum();
        }
        set
        {
            IAttributeState iAttributeBaseState = GetAttribute(0);
            if (iAttributeBaseState != null)
            {
                iAttributeBaseState.PhysicsResistance = value;
            }
        }
    }

